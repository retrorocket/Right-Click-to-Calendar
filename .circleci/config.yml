version: 2.1 # CircleCI 2.1 を使用します
jobs: # 一連のステップ
  build: # ワークフローを使用しない実行では、エントリポイントとして `build` ジョブが必要です
    working_directory: ~/workspace # ステップが実行されるディレクトリ
    docker: # Docker でステップを実行します
      - image: circleci/node:latest # このイメージをすべての `steps` が実行されるプライマリ コンテナとして使用します
    steps: # 実行可能コマンドの集合
      - checkout # ソース コードを作業ディレクトリにチェックアウトする特別なステップ
      - restore_cache: # 依存関係キャッシュを復元する特別なステップ
          # 依存関係キャッシュについては https://circleci.com/ja/docs/2.0/caching/ をお読みください
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: install-yarn
          command: yarn
      - save_cache: # 依存関係キャッシュを保存する特別なステップ
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
      - run:
          name: JUnit カバレッジ レポーターのインストール
          command: yarn add --dev jest-junit
      - run:
          name: JUnit をレポーターとして使用したテストの実行
          command: jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit/js-test-results.xml"
      - store_artifacts: # テスト結果をアーティファクトとして保存する特別なステップ
          # アーティファクト (https://circleci.com/ja/docs/2.0/artifacts/) に表示するテスト サマリーをアップロードします
          path: reports/junit/js-test-results.xml
          prefix: tests
      - store_test_results: # テスト サマリー (https://circleci.com/ja/docs/2.0/collect-test-data/) に表示するため
          path: reports/junit
      # デプロイ例については https://circleci.com/ja/docs/2.0/deployment-integrations/ を参照してください
